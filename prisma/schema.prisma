// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  // this relationMode = primsa emulates relations in Prisma Client, and not by foreginKeys in DB
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST //Not using this role in this project, logic is subaccounnt user can give access to their account to someone else (their client) as guest
}

enum TriggerTypes {
  CONTACT_FORM
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

enum ActionType {
  CREATE_CONTACT
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

// MODELS

model User {
  id            String         @id @default(uuid())
  name          String
  avatarUrl     String         @db.Text //https://www.prisma.io/docs/orm/reference/prisma-schema-reference
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role           @default(SUBACCOUNT_USER)
  agencyId      String
  Agency        Agency         @relation(fields: [agencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Permissions   Permission[] //permissions means can a user see a subaccount, by default AGENCY_OWNER has permission to see all accounts, but SUBACCOUNT_USER only have access to their own account subaccount etc.
  Tickets       Ticket[] // tickets assigned to them from the Kanban board
  Notifications Notification[] // notifications for the user

  @@index([agencyId])
}

model Agency {
  id               String                @id @default(uuid())
  connectAccountId String                @default("") // stripe connect account id (check where this Id is coming from)
  customerId       String                @default("") // when user is subscriped to a plan, this is their id (they are our customer in stripe) (need to double check)
  name             String
  agencyLogo       String                @db.Text //https://www.prisma.io/docs/orm/reference/prisma-schema-reference
  companyEmail     String                @db.Text
  companyPhone     String
  whiteLabel       Boolean               @default(true) // if true, all agency's subaccounts show the agency logo.
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5) // (check what is this)
  users            User[] // multiple users can belong to an agency
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  SubAccounts      SubAccount[] // multiple subaccounts can belong to an agency
  SidebarOptions   AgencySidebarOption[] // agency side bar to control what is shown on the sidebar
  Invitations      Invitation[] // invitations to join the agency
  Notifications    Notification[] // notifications for the agency
  Subscription     Subscription? // details of agency's subscription to our plan 
  AddOns           AddOn[] // Different products that are addition to the subscription fee we sell
}

model Permission {
  id           String     @id @default(uuid())
  email        String // email of the user, user can be of any ROLE
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  subAccountId String // permission related to that subaccount id
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  access       Boolean // if they have access to the subaccount or not

  @@index([subAccountId])
  @@index([email])
}

model SubAccount {
  id               String                    @id @default(uuid())
  connectAccountId String                    @default("") // stripe connect account id (check where this Id is coming from)
  name             String
  subAccountLogo   String                    @db.Text //https://www.prisma.io/docs/orm/reference/prisma-schema-reference
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String                    @db.Text
  companyPhone     String
  goal             Int                       @default(5) // (check what is this)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String // one subaccount can only belong to one agency
  agency           Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  SidebarOptions   SubAccountSidebarOption[] // subaccount side bar to control what is shown on the sidebar
  Permissions      Permission[] // permissions for the subaccount
  Funnels          Funnel[] // one subaccount can have multiple websites (funnels)
  Media            Media[] // all media files uploaded by the subaccount
  Contacts         Contact[] // all the contact (leads generated from funnel) by the subaccount
  Triggers         Trigger[] // no use of this yet
  Automations      Automation[] // no use of this yet
  Pipelines        Pipeline[]
  Tagss            Tag[]
  Notifications    Notification[] // notifications for the subaccount

  @@index([agencyId])
}

model Tag {
  id           String     @id @default(uuid())
  name         String
  color        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String // one tag can only belong to one subaccount
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Tickets      Ticket[] // tickets that are assigned to this tag

  @@index([subAccountId])
}

model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subAccountId String // one pipeline can only belong to one subaccount

  @@index([subAccountId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pipelineId String // one lane can only belong to one pipeline
  Tickets    Ticket[] // tickets that are assigned to this lane
  order      Int      @default(0)

  @@index([pipelineId])
}

model Ticket {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String
  order       Int      @default(0)
  Lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  value       Decimal?
  description String?
  Tags        Tag[]

  customerId String?
  Customer   Contact? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  assignedUserId String?
  Assigned       User?   @relation(fields: [assignedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subAccountId String // one trigger can only belong to one subaccount
  SubAccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Automations  Automation[]

  @@index([subAccountId])
}

model Automation {
  id                  String               @id @default(uuid())
  name                String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  triggerId           String?
  published           Boolean              @default(false)
  Trigger             Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subAccountId        String // one automation can only belong to one subaccount
  SubAccount          SubAccount           @relation(fields: [subAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Actions             Action[]
  AutomationInstances AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}

model Contact {
  id           String   @id @default(uuid())
  name         String
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subAccountId String

  Subaccount SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Ticket     Ticket[]

  @@index([subAccountId])
}

model Media {
  id           String     @id @default(uuid())
  type         String?
  name         String
  link         String     @unique
  subAccountId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([subAccountId])
}

model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  subAccountId  String // one funnel can only belong to one subaccount
  SubAccount    SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FunnelPages   FunnelPage[]
  liveProducts  String?      @default("[]")
  ClassNames    ClassName[]

  @@index([subAccountId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?  @db.Text
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.Text
  order        Int
  previewImage String?  @db.Text
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([funnelId])
}

model AgencySidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String
  Agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subAccountId String?

  @@index([subAccountId])
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  agencyId String
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)

  @@index([agencyId])
}

model Notification {
  id           String  @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String

  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency     Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  agencyId String? @unique
  Agency   Agency? @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}

model AddOn {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}
